steal("lib/sentrana/Authentication/AuthenticationModel.js", function () {
    can.Control.extend("Sentrana.Controllers.LoginController", {
        defaults: {
            mainTemplate: "lib/sentrana/Authentication/templates/login.ejs",
            lodingWheelTemplate: "lib/sentrana/Authentication/templates/loadingwheel.ejs",
            authenticationModel: Sentrana.Models.AuthenticationModel,
            defaultMessages: {
                logout_failed: "INTERNAL ERROR: Logout failed.",
                malformed_response: "Internal Error: Malformed Login response. Please report to an administrator.",
                empty_user_name: "Please specify a user name",
                empty_password: "Empty password not allowed",
                email_address_required: "Please specify your email address.",
                invalid_format_emailaddress: "Invalid format of Email address",
                incorrect_emailaddress: "Your email address was not recognized. Please try again or contact your administrator",
                password_updated: "Your password reset link has been sent to your email address. Please use the link to reset your password.",
                password_expired: "Your password has expired. Try to reset your password or contact system administrator.",
                username_sent: "Your username has been sent to your email address.",
                malformed_response_forgotpassword: "Internal Error:  Please report to Sentrana for investigation.",
                incorrect_url: "The requested URL was not found.",
                blankSecurityCodeFieldMessage: "The Security code field cannot be left blank.",
                blankPasswordFieldMessage: "The password field cannot be left blank.",
                passwordNotMatchMessage: "Passwords do not match.",
                errorMessage: "Failed to change your password, please try later again.",
                successMessage: "Your password has been updated successfully. Please log in with your new credentials. Redirecting to login page...",
                wrongCurrentPasswordMessage: "Your current password is incorrect.",
                samePasswordMessage: "Choose a password you haven't previously used with this account.",
                emptyPasswordMessage: "New password cannot be empty.",
                invalidSecurityCodeORToken: "Invalid security code or token.",
                validatinglink: "Validating password reset link. Please wait...",
                securityTokenExpired: "Your password reset link is no longer valid.",
                invalidPasswordFormatMessage: "Invalid password. Valid passwords must contain at least eight characters, no spaces, " +
                    "both lowercase and uppercase characters, at least one numeric digit, and at least one special character (any character not 0-9, a-z, A-Z).",
                passwordPolicyViolatedMessage: "Password policy violated. You cannot use recently used 3 passwords as New Password"
            }
        },
        pluginName: 'sentrana_login_page'
    }, {
        init: function () {
            this.app = this.options.app;
            var that = this;
            this.element.html(can.view(that.options.mainTemplate, {}));
            this.$loginSection = $(".login-form", this.element);
            this.$loginButton  = $(".login-submit", this.element);
            this.$loginUserName = $(".input-username", this.element);
            this.$loginPassword = $(".input-password", this.element);
            this.$loginError = $(".login-error", this.element);
            this.$rememberMe = this.element.find("#id-chk-remember-me");
            this.$loginError.hide();

            this.$passwordResetForm = this.element.find('#password-reset-form');
            this.$autoGeneratedPasswordResetForm = this.element.find('#auto-generated-password-reset-form');
            this.$loginMsg = this.element.find(".login-msg");
            this.forgotOkButton = this.element.find("#password-reset-button");
            this.$dwSelector = $(".dw-selector");
            this.$emailAddress = this.element.find('#p_email_id');
            this.$forgotPassError = this.element.find(".password-reset-error");
            this.$forgotPassMessage = this.element.find(".password-reset-message");
            this.$rdopassword = this.element.find('#rdo-forgot-password');
            this.$rdousername = this.element.find('#rdo-forgot-username');
            this.$forgotPassMessage.hide();

            this.$securityCode = this.element.find("input[name=security-code]");
            this.$newPwd = this.element.find("input[name=new-password]");
            this.$newPwdConfirm = this.element.find("input[name=confirm-password]");
            this.$updatePwdButton = this.element.find("#auto-generated-password-reset-button");
            this.$successUpdatePwd = this.element.find(".change-pwd-success");
            this.$successUpdatePwd.hide();
            this.$errorUpdatePwd = this.element.find(".change-pwd-error");
            this.$errorUpdatePwd.hide();

            this.show();
            $('[data-toggle="tooltip"]').tooltip();
        },

        render: function () {
        },

        show: function () {
            this.showLogin = true;
            this.element.show();
            this.setFocustoLoginControl();
        },

        hide: function () {
            this.showLogin = false;
            this.$loginError.hide();
            this.element.hide();
        },

        setFocustoLoginControl: function() {
            var userInfo = this.app.retrieveRememberMeInfo();
            this.$loginUserName.focus();
            if (userInfo.rememberMe) {
                this.$loginUserName.val(userInfo.userNameToRemember);
                    this.$loginPassword.focus();
            }else {
                this.$loginUserName.val("");
            }

        },

        setCookieInfo: function (userInfo) {
            this.$rememberMe.prop('checked', userInfo.rememberMe);
            this.$loginUserName.val(userInfo.userNameToRemember);
            this.$loginPassword.focus();
        },

        login: function(userName, password) {
            var that = this, result,
            serviceUrl = this.app.generateUrl? this.app.generateUrl("login"): this.app.constructor.generateUrl("login");

            this.options.authenticationModel.login(
                serviceUrl,
                JSON.stringify({
                    userName: userName,
                    password: password
                }),
                function (data) {
                    result = that.setLoginDataToApp(that, data);
                },
                function (jqXHR, textStatus, errorThrown) {

                    if (that.app.isPasswordExpired(jqXHR)) {
                        that.showPasswordResetDialog(userName);
                    }

                    var errorText = that.app.getServerErrorMessage(jqXHR);

                    if (!errorText || !errorText.trim()) {
                        errorText = that.getClientErrorMessage("malformed_response");
                    }

                    that.loginFailed(errorText);
                    result = false;

                }
            );
            return result;
        },

        setLoginDataToApp: function (that, data) {

            that.hideLoadingWheel();
            // success
            // Do we have a valid response object?
            if (!data || !data.userInfo || !data.sessionId) {
                that.$loginError.html(this.getClientErrorMessage("malformed_response")).show();
                return false;
            }

            var userName = data.userInfo.userName;

            if (that.app.isPasswordExpired(data)) {
                that.loginFailed(this.getClientErrorMessage("password_expired"));
                that.showPasswordResetDialog(userName);
                return false;
            }

            var lastAppState = Sentrana.ApplicationStorage.getData("lastAppState");

            Sentrana.ApplicationStorage.clearAppStorage();

            // Get some individual fields back...
            var fullName = data.userInfo.firstName + " " + data.userInfo.lastName, isDeveloper = !!data.debugMode;
            // Save the session ID...
            that.app.constructor.sessionID = that.app.sessionID = data.sessionId;

            // Save the successful login user's login Id
            that.app.constructor.userLoginId = that.app.userLoginId = userName;

            // Save information about the user...
            that.app.saveUserInfo({
                userName: userName,
                fullName: fullName,
                isDeveloper: isDeveloper,
                userID: data.userInfo.userID,
                orgName: data.userInfo.orgName,
                applications: data.userInfo.organization.applications
            });

            // Indicate that we have an open session!
            that.app.openSession(data);
            Sentrana.LoginData = data;
            //Sentrana.LoginData.userInfo = Sentrana.mapUserModel(Sentrana.LoginData.userInfo);

            $.cookie('isLoggedIn', true);

            // call main app login success handler.
            that.app.loginSuccess(data);

            return true;
        },

        loginFailed: function (message) {
            this.hideLoadingWheel();
            this.$loginError.html(message).show();
            this.app.loginFailure();
        },

        showPasswordResetDialog: function (userName) {
            this.app.changePasswordController.open(undefined, userName, true);
        },

        getClientErrorMessage: function (messageKey) {
            //this method need to be overwritten by specific app main controller
            var errorText = this.app.getClientErrorMessage(messageKey);

            if (!errorText) {
                errorText = this.options.defaultMessages[messageKey];
            }

            return errorText;
        },

        logout: function (isPasswordExpired) {

            if (isPasswordExpired) {
                this.$loginError.html("").hide();
            }

            var that = this,
            serviceUrl = this.app.generateUrl ? this.app.generateUrl("logout", {}) : this.app.constructor.generateUrl("logout", {});

            this.options.authenticationModel.logout(serviceUrl,
                function () {
                    // Inform our global state that the user has elected to close the session...
                    Sentrana.ApplicationStorage.clearAppStorage();
                    that.app.closeSession("logout");
                },
                function (jqXHR, textStatus, errorThrown) {
                    // If the user is already logged out then close the session
                    if (jqXHR.status && jqXHR.status == 401) {
                        that.app.closeSession("logout");
                    }
                    else {
                        var errorText = that.app.getServerErrorMessage(jqXHR);
                        if (!errorText || !errorText.trim()) {
                            errorText = that.getClientErrorMessage("logout_failed");
                        }
                        alert(errorText);
                    }
                }
            );
        },

        // Browser Event: User tries to login...
        ".login-submit click": function(el, ev) {
            //Remove and hide forgot password message
            this.$forgotPassMessage.html("").hide();

            var userName = this.$loginUserName.val() || "", password = this.$loginPassword.val();

            // Is the user name empty or white space?
            if ($.trim(userName) === "") {
                this.$loginError.html(this.getClientErrorMessage("empty_user_name")).show();
                return;
            }

            if ($.trim(password) === "") {
                this.$loginError.html(this.getClientErrorMessage("empty_password")).show();
                return;
            }

            // Empty the password field
            this.$loginPassword.val("");
            this.showLoadingWheel("Validating user, please wait...");
            this.login(userName, password);
        },

        showLoadingWheel: function(message) {
            this.$loginSection.hide();
            this.$passwordResetForm.hide();
            this.$autoGeneratedPasswordResetForm.hide();
            this.$loginMsg.html(can.view(this.options.lodingWheelTemplate, { message: message , hideImage: false }));
            this.$loginMsg.show();
        },

        hideLoadingWheel: function () {
            this.$loginSection.show();
            this.$passwordResetForm.hide();
            this.$autoGeneratedPasswordResetForm.hide();
            this.$loginMsg.html("");
            this.$loginMsg.hide();
        },

        showErrorMessage: function (message) {
            this.$loginError.html(message).show();
        },

        checkLogin: function (userName) {
            var userInfo = this.app.retrieveUserInfo();
            if (!userInfo) {
                return null;
            }

            if (!userName) {
                userName = userInfo.userName;
            }

            var that = this, result,
                serviceUrl = this.app.generateUrl ? this.app.generateUrl("ValidateSession", { username: userName }) :
                                                    this.app.constructor.generateUrl("ValidateSession", { username: userName });

            this.options.authenticationModel.checkLogin(serviceUrl, null,
                function (data, textStatus, jqXHR) {
                    if (!data.hasOwnProperty("HasError")) {
                        that.setLoginDataToApp(that, data);
                        result = data;
                    } else {
                        that.app.clearUserInfo();
                        result = null;
                    }
                },
                function () {
                    that.app.clearUserInfo();
                    result = null;
                }
            );

            return result;
        },

        'input[name="pwd"] keypress': function(el, ev) {

            if (ev.keyCode === 13) {
                this.$loginButton.trigger('click');
            }
        },

        "#forgot-password-link click": function () {
            this.showForgotPasswordForm();
            return false;
        },

        showLoginForm: function () {
            this.$passwordResetForm.hide();
            this.$autoGeneratedPasswordResetForm.hide();
            this.$loginSection.show();
            this.$forgotPassError.html("").hide();
            this.$loginMsg.html("").hide();
            this.$loginPassword.val("");
        },

        showForgotPasswordForm: function () {
            this.$loginSection.hide();
            this.$autoGeneratedPasswordResetForm.hide();
            this.$loginError.html("").hide();
            this.$forgotPassMessage.html("").hide();
            this.$forgotPassError.html("").hide();
            this.$passwordResetForm.show();
            this.$emailAddress.val('').focus();
            this.$rdopassword.prop("checked", true);
        },

        showResetPasswordForm: function (token) {
            var that = this, url = that.app.generateUrl ? that.app.generateUrl("IsValidToken", { token: token }) : that.app.constructor.generateUrl("IsValidToken", { token: token });
            that.showLoadingWheel(that.getClientErrorMessage("validatinglink"));

            this.options.authenticationModel.isValidToken(url,
                function (data) {
                    if (data) {
                        that.hideLoadingWheel();
                        that.passWordResetToken = token;
                        that.$loginSection.hide();
                        that.$passwordResetForm.hide();
                        that.$forgotPassError.html("").hide();
                        that.$autoGeneratedPasswordResetForm.show();
                    }
                },
                function (jqXHR) {
                    that.hideLoadingWheel();
                    var errorText = that.app.getServerErrorMessage(jqXHR);

                    if (!errorText || !errorText.trim()) {
                        errorText = that.getClientErrorMessage("securityTokenExpired");
                    }

                    that.showForgotPasswordForm();
                    that.$forgotPassError.html(errorText).show();
                }
            );
        },

        hideResetPasswordForm: function () {
            this.$autoGeneratedPasswordResetForm.hide();
            this.$passwordResetForm.hide();
            this.$loginSection.show();
            this.$forgotPassError.html("").hide();
        },

        "#password-reset-form .close click": function () {
            window.location.hash = can.route.url({
                "page": "login"
            });
            this.showLoginForm();
            return false;
        },

        ".input-forgot-password keyup": function (el, ev) {
             if (ev.keyCode !== 13 && $.trim(this.$emailAddress.val()).length > 0) {
                this.$forgotPassError.html("").hide();
            }
        },

        ".input-forgot-password keypress": function (el, ev) {
            if (ev.keyCode === 13) {
                setTimeout(function () {
                    can.trigger($("#password-reset-button"), 'click');
                }, 200);
                return false;
            }
        },

        "#password-reset-button click": function () {
            var emailAddress = this.$emailAddress.val();
            if ($.trim(emailAddress).length === 0) {
                this.$forgotPassError.html(this.getClientErrorMessage("email_address_required")).show();
                this.$emailAddress.focus();
                return;
            } else if (!this.validateEmail(emailAddress)) {
                this.$forgotPassError.html(this.getClientErrorMessage("invalid_format_emailaddress")).show();
                this.$emailAddress.valueOf("").focus();
                return;
            }

            var html = '<div class="loading"><p class="small-waitingwheel"><img src="images/loader-white.gif"/></p></div>';
            this.options.app.blockElement($("#login-container"), html);

            var that = this;
            setTimeout(function() {
                that.resetPassword(emailAddress);
            }, 400);
        },

        validateEmail: function(email) {
            var emailFormat = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return emailFormat.test(email);
        },

        resetPassword: function(emailAddress) {
            var that = this, url = this.getForgotPasswordUrl(emailAddress);

            this.options.authenticationModel.resetPassword(url,
                function (data) {
                    that.showSuccessMessage(data);
                },
                function (jqXHR) {

                    var errorText = that.app.getServerErrorMessage(jqXHR);

                    if (!errorText || !errorText.trim()) {
                        errorText = that.getClientErrorMessage("incorrect_emailaddress");
                    }

                    that.$forgotPassError.html(errorText).show();

                },
                function() {
                    that.options.app.unBlockElement($("#login-container"));
                }
            );

        },

        showSuccessMessage: function (data) {
            if (data) {
                if (this.$rdopassword.is(':checked')) {
                    this.$forgotPassMessage.html(this.getClientErrorMessage("password_updated")).show();
                } else {
                    this.$forgotPassMessage.html(this.getClientErrorMessage("username_sent")).show();
                }
                this.showLoginForm();
            } else {
                this.$forgotPassError.html(this.getClientErrorMessage("malformed_response_forgotpassword")).show();
            }
        },

        getForgotPasswordUrl: function (emailAddress) {
            var url;
            if (this.$rdopassword.is(':checked')) {
                url = this.app.generateUrl ? this.app.generateUrl("ForgotPassword", { emailAddress: emailAddress }) :
                this.app.constructor.generateUrl("ForgotPassword", { emailAddress: emailAddress });
                return url;
            }

            url = this.app.generateUrl ? this.app.generateUrl("ForgotUsername", { emailAddress: emailAddress }) :
                  this.app.constructor.generateUrl("ForgotUsername", { emailAddress: emailAddress });

            return url;

        },

        "#auto-generated-password-reset-button click": function() {
            var securityCode = this.$securityCode.val();
            var newPassword = this.$newPwd.val();
            var newPasswordConfirm = this.$newPwdConfirm.val();

            var blankSecurityCodeFieldMessage = this.getClientErrorMessage("blankSecurityCodeFieldMessage");
            var blankPasswordFieldMessage = this.getClientErrorMessage("blankPasswordFieldMessage");
            var passwordNotMatchMessage = this.getClientErrorMessage("passwordNotMatchMessage");

            if (securityCode.length === 0) {
                this.$errorUpdatePwd.html(blankSecurityCodeFieldMessage);
                this.$errorUpdatePwd.show();
                return;
            }

            if (newPassword.length === 0 || newPasswordConfirm.length === 0) {
                this.$errorUpdatePwd.html(blankPasswordFieldMessage);
                this.$errorUpdatePwd.show();
                return;
            }

            if (newPasswordConfirm !== newPassword) {
                this.$errorUpdatePwd.html(passwordNotMatchMessage);
                this.$errorUpdatePwd.show();
                return;
            }

            var html = '<div class="loading"><p class="small-waitingwheel"><img src="images/loader-white.gif"/></p></div>';
            this.options.app.blockElement($("#login-container"), html);

            var that = this;
            setTimeout(function() {
                that.updatePasswordFromLink(securityCode, newPassword, that);
            }, 400);
        },

        updatePasswordFromLink: function(securityCode, password, that) {
            var successMessage = this.getClientErrorMessage("successMessage");
            var serviceUrl = that.app.generateUrl ? that.app.generateUrl("ChangeAutoGeneratedPassword", {}) : that.app.constructor.generateUrl("ChangeAutoGeneratedPassword", {});

            this.options.authenticationModel.changeAutoGeneratedPassword(serviceUrl, {
                    token: that.passWordResetToken,
                    securityCode: securityCode,
                    newPassword: password
                }   , function (data) {
                    that.$errorUpdatePwd.hide();
                    that.$successUpdatePwd.html(successMessage  ).show();
                    setTimeout(function () {
                        that.hideResetPasswordForm();
                        that.$successUpdatePwd.hide();
                        that.app.closeSession("logout");
                        document.location.hash = "";
                    }, 3000);
                    //var result = that.setLoginDataToApp(that, data);
                }, function (jqXHR) {

                    var errorText = that.app.getServerErrorMessage(jqXHR);

                    if (!errorText || !errorText.trim()) {
                        errorText = that.getClientErrorMessage("invalidSecurityCodeORToken");
                    }

                    that.$errorUpdatePwd.html(errorText).show();

                }, function () {
                    that.options.app.unBlockElement($("#login-container"));
                }
            );
        }
    });
});
